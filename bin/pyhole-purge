#!/usr/bin/env python3

# pyhole - a clone of the Pi-hole DNS adblocker, written in Python.
# pyhole  (c) 2016 by ryt51V
# Pi-Hole (c) 2015, 2016 by Jacob Salmela

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Our very own module!
from pyhole import pyhole
# For running system commands and setting permissions.
import os
# For file operations
import shutil

# Exit if not root.
pyhole.require_root()

########################
##  Helper Functions  ##
########################

def attempt_rmtree(path = None):
    """Try to delete the directory, but if it doesn't exist then no errors."""
    if path:
        try:
            shutil.rmtree(path)
        except FileNotFoundError:
            pass
        #end except
    #end if
#end def attempt_rmtree( path = None ):

########################
###       Purge      ###
########################

if not pyhole.configured:
    print("pyhole-purge: pyhole is not configured; nothing to purge.")
else:
    print("pyhole-purge: pyhole is configured.")
    
    # Even if this is a configured pyhole, we will still be careful.
    # Get variables, with "None" as default values
    
    try:    web_server      = pyhole.config['WebServer']['web_server']
    except: web_server      = None
    
    try:    web_root_pyhole = pyhole.config['WebServer']['web_root_pyhole']
    except: web_root_pyhole = None
    
    try:    web_root_admin  = pyhole.config['WebServer']['web_root_admin']
    except: web_root_admin  = None
    
    # Stop services.
    # Note that services_changestate is happy to accept None as a web_server,
    # in which case it only stops dnsmasq
    pyhole.services_changestate(web_server, stop = True)
    
    # Web server specific actions.
    if web_server == "lighttpd":
        # Disable the website.
        os.system("lighty-disable-mod pyhole")
        
        # Restore the original lighttpd.conf, overwriting our version.
        lighttpd_conf_out = '/etc/lighttpd/lighttpd.conf'
        lighttpd_conf_out_bak = lighttpd_conf_out + ".orig"
        shutil.move(lighttpd_conf_out_bak, lighttpd_conf_out)
    elif web_server == "apache":
        # Disable the websites.
        os.system("a2dissite pyhole")
        os.system("a2dissite pyhole-admin")
    elif web_server == "manual":
        pass
    #end elif
    
    # Remove our website files.
    attempt_rmtree(web_root_pyhole)
    attempt_rmtree(web_root_admin)
    
    # Remove our lists.
    attempt_rmtree(pyhole.var_dir)
    
    # Start services again.
    pyhole.services_changestate(web_server, start = True)
    
#end else
