#!/usr/bin/env python3

# pyhole - a clone of the Pi-hole DNS adblocker, written in Python.
# pyhole  (c) 2016 by ryt51V
# Pi-Hole (c) 2015, 2016 by Jacob Salmela

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Our very own module!
from pyhole import pyhole
# For checking files exist
import os
# For getting our exception text
import sys
# For downloading files.
import urllib.parse
import urllib.request

pyhole.sudo_pyhole()

def gravity_collapse(adlists_file):
    """Determine our adlist sources, and output as a list."""
    with open(adlists_file, 'rt') as f:
        # We need all lines that are not blank and are not comments.
        
        # Get all lines with trailing whitespace stripped.
        lines = (line.rstrip() for line in f) 
        # Get all lines that
        #   (a) Are not blank, AND
        #   (b) Do not begin with a hash (after any leading whitespace).
        sources = list(
                        line for line in lines if (line and not line.lstrip().startswith('#') )
                      )
        #sources = list(for line in lines if line and not line.lstrip().startswith('#'))
    #end with open(adlist_file, 'rt') as f:
    
    return sources
#end def gravity_collapse(adlists_file):

# Note:
#   We're going to be handling a large number of domains here,
#   so we save a lot of stuff in files rather than in memory
#   so that we're not wasting RAM.

def gravity_download_source(url : str, filename : str, headers = {}, post_values = {} ):
    """Download the source to a file, using any headers or POST data required."""
    
    # PROTIP: Below, Replace post_values with True to get
    # an HTTP error with some providers.  Useful for testing
    if post_values:
        data = urllib.parse.urlencode(post_values)
        data = data.encode('ascii')
    else:
        data = None
    #end else:
    req = urllib.request.Request(url, data, headers)
    with urllib.request.urlopen(req, timeout = 20) as response, open (filename, 'wb') as f:
        f.write( response.read() )
    #end with
    
#end def gravity_download_source(url : str, filename : str, headers = {}, post_values = {} ):

def gravity_spinup(sources : list):
    """Download each source to a file."""
    
    i = 0
    sources_out = []
    for s in sources:
        
        # Get just the domain name itself.
        domain = urllib.parse.urlparse(s).netloc
        
        # Generate our save filename.
        basename = "list.{0}.{1}.domains".format( i, domain )
        filename = os.path.join( pyhole.var_dir, basename )
        
        headers = {
                        'User-Agent' : 'Mozilla/10.0'
                  }
        post_values = {}
        # Handle our special cases
        if "adblock.mahakala.is" in s:
            headers = {
                            'User-Agent'    : 'Mozilla/5.0 (X11; Linux x86_64; rv:30.0) Gecko/20100101 Firefox/30.0',
                            'Referer'       : 'http://forum.xda-developers.com/'
                      }
        elif "pgl.yoyo.org" in s:
            post_values = {
                                'mimetype'      : 'plaintext',
                                'hostformat'    : 'hosts'
                          }
        #end elif
        
        print("::: Getting {0} list...".format(domain) , end='')
        try:
            gravity_download_source( s, filename, headers, post_values)
            print("successful!")
        except urllib.error.HTTPError as inst:
            print("encountered error {0} {1}.".format(inst.code, inst.reason) )
        except:
            print("encountered an unknown error:", sys.exc_info()[0] )
        else:
            # Add to sources_out a 2-tuple of the source and filename.
            sources_out.append( ( s, filename ) )
        #end else
        
        i = i + 1
    #end for s in sources:
    
    return sources_out
#end def gravity_spinup(sources : list):

########################
###       Begin      ###
########################

# Find out if we're loading adlist.list or adlist.default
if os.path.isfile(pyhole.adlists_file):
    adlists_file = pyhole.adlists_file
else:
    adlists_file = pyhole.adlists_default
#end else

# Get our sources
sources = gravity_collapse(adlists_file)

# Download our sources.  sources_out is a list of 2-tuples with URLs and filenames.
sources_out = gravity_spinup(sources)

